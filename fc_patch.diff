diff --git a/__init__.py b/__init__.py
index ed41329..0a577d9 100644
--- a/__init__.py
+++ b/__init__.py
@@ -2,7 +2,7 @@ bl_info = {
     "name": "Fast Carve",
     "description": "Hardsurface utility Blender addon for quick and easy boolean and bevel operations",
     "author": "Jayanam",
-    "version": (0, 9, 5, 7),
+    "version": (0, 9, 5, 8),
     "blender": (2, 80, 0),
     "location": "View3D",
     "category": "Object"}
diff --git a/fc_primitive_mode_op.py b/fc_primitive_mode_op.py
index 490228e..f52cbdb 100644
--- a/fc_primitive_mode_op.py
+++ b/fc_primitive_mode_op.py
@@ -144,8 +144,8 @@ class FC_Primitive_Mode_Operator(bpy.types.Operator):
 
         # The mouse is moved
         if event.type == "MOUSEMOVE" and not self.shape.is_none():
-
-            mouse_pos_2d = (event.mouse_region_x, event.mouse_region_y)
+            
+            mouse_pos_2d = self.shape.get_mouse_pos_2d(event.mouse_region_x, event.mouse_region_y)
 
             mouse_pos_2d, mouse_pos_3d = self.get_snapped_mouse_pos(mouse_pos_2d, context)
 
@@ -208,6 +208,10 @@ class FC_Primitive_Mode_Operator(bpy.types.Operator):
                 if self.shape.start_move(mouse_pos_3d):
                     result = "RUNNING_MODAL"
 
+            if event.type in ["X", "Y"]:
+                self.shape.set_move_axis(event.type)
+                result = "RUNNING_MODAL"
+
             # try to rotate the shape
             if event.type == "R":
                 mouse_pos_2d = (event.mouse_region_x, event.mouse_region_y)
diff --git a/types/circle_shape.py b/types/circle_shape.py
index ae38ae7..2efaf51 100644
--- a/types/circle_shape.py
+++ b/types/circle_shape.py
@@ -120,7 +120,13 @@ class Circle_Shape(Shape):
 
         self.add_action(Action(self.get_prim_id(),  "Primitive",          "Circle"),    None)
         self.add_action(Action("M",                 "Mode",               bool_mode),   None)
-        self.add_action(Action("G",                 "Move",               ""),          ShapeState.CREATED)
+
+        self.build_move_action()
+        # if not self._is_moving:
+        #     self.add_action(Action("G",                 "Move",               ""),          ShapeState.CREATED)
+        # else:
+        #     self.add_action(Action("X or Y",            "Move Axis lock",     ""),          ShapeState.CREATED)            
+
         self.add_action(Action("E",                 "Extrude",            ""),          ShapeState.CREATED)
         self.add_action(Action("C",                 "Center",             center_type), ShapeState.NONE)
         self.add_action(Action("Left Click",        "Create",             ""),          ShapeState.PROCESSING)
diff --git a/types/polyline_shape.py b/types/polyline_shape.py
index 338625e..b48d929 100644
--- a/types/polyline_shape.py
+++ b/types/polyline_shape.py
@@ -59,7 +59,7 @@ class Polyline_Shape(Shape):
         bool_mode = bpy.context.scene.bool_mode
         self.add_action(Action(self.get_prim_id(),  "Primitive",          "Polyline"),  None)
         self.add_action(Action("M",                 "Mode",               bool_mode),   None)
-        self.add_action(Action("G",                 "Move",               ""),          ShapeState.CREATED)
+        self.build_move_action()
         self.add_action(Action("E",                 "Extrude",            ""),          ShapeState.CREATED)
         self.add_action(Action("Left Click",        "Add line",           ""),          ShapeState.PROCESSING)
         self.add_action(Action("Ctrl + Left Click", "Start",              ""),          ShapeState.NONE)
diff --git a/types/rectangle_shape.py b/types/rectangle_shape.py
index d4a1657..afdb4af 100644
--- a/types/rectangle_shape.py
+++ b/types/rectangle_shape.py
@@ -131,7 +131,7 @@ class Rectangle_Shape(Shape):
         bool_mode = bpy.context.scene.bool_mode
         self.add_action(Action(self.get_prim_id(),  "Primitive",          "Rectangle"), None)
         self.add_action(Action("M",                 "Mode",               bool_mode),   None)
-        self.add_action(Action("G",                 "Move",               ""),          ShapeState.CREATED)
+        self.build_move_action()
         self.add_action(Action("R",                 "Rotate",             ""),          ShapeState.CREATED)
         self.add_action(Action("E",                 "Extrude",            ""),          ShapeState.CREATED)
         self.add_action(Action("Left Click",        "Set 2nd point",      ""),          ShapeState.PROCESSING)
diff --git a/types/shape.py b/types/shape.py
index 236c8ba..aa3446e 100644
--- a/types/shape.py
+++ b/types/shape.py
@@ -87,10 +87,11 @@ class Shape:
         self._is_rotating = False
         self._is_extruding = False
         self._move_offset = 0.0
+        self._move_axis = None
         self._rotation = 0.0
         self._extrusion = 0.0
         self._view_context = None
-        self._mouse_pos_2d = (0,0)
+        self._mouse_pos_2d = [0,0]
         self._is_extruded = False
         self._snap_to_target = True
         self._bvhtree = None
@@ -207,6 +208,13 @@ class Shape:
         self._state = value
         self.build_actions()
 
+    def build_move_action(self):
+        if not self._is_moving:
+            self.add_action(Action("G",       "Move",               ""), ShapeState.CREATED)
+        else:
+            self.add_action(Action("X or Y",  "Move Axis lock",     ""), ShapeState.CREATED)            
+
+
     def build_actions(self):
         self._actions.clear()
 
@@ -255,7 +263,9 @@ class Shape:
     def start_move(self, mouse_pos):
         if self.is_created() and mouse_pos is not None:
             self._is_moving = True
+            self._move_axis = None
             self._move_offset = mouse_pos
+            self.build_actions()
             return True
         return False
 
@@ -266,8 +276,27 @@ class Shape:
             region = self._view_context.region
             self._vertices_2d[index] = location_3d_to_region_2d(region, rv3d, vertex_3d)
 
+        self._move_axis = None
         self._is_moving = False
         self._move_offset = 0.0
+        self.build_actions()
+
+    def get_mouse_pos_2d(self, x, y):
+
+        # Check if we have an axis constraint, 
+        # if not, just write and return the 2d positions
+        if self._move_axis is None:
+            self._mouse_pos_2d = [x,y]
+        elif self._move_axis == "Y":
+            self._mouse_pos_2d[1] = y
+        else:
+            self._mouse_pos_2d[0] = x
+
+        return self._mouse_pos_2d
+
+
+    def set_move_axis(self, axis):
+        self._move_axis = axis
 
     def start_rotate(self, mouse_pos, context):
         return False
